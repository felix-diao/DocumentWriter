{"version":3,"sources":["src/pages/AI/Translator/index.tsx","src/services/baiduTranslate.ts"],"sourcesContent":["// Translator.tsx\n\nimport {\n  CopyOutlined,\n  DeleteOutlined,\n  FileTextOutlined,\n  HistoryOutlined,\n  SoundOutlined,\n  SwapOutlined,\n} from '@ant-design/icons';\nimport { PageContainer, ProCard } from '@ant-design/pro-components';\nimport {\n  Button,\n  Col,\n  Input,\n  List,\n  message,\n  Progress,\n  Row,\n  Select,\n  Space,\n  Spin,\n  Tabs,\n  Tag,\n  Typography,\n  Upload,\n} from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { baiduTranslateService } from '@/services/baiduTranslate';\n\nconst { TextArea } = Input;\nconst { Text } = Typography;\n\ninterface TranslationHistory {\n  id: string;\n  sourceText: string;\n  translatedText: string;\n  sourceLang: string;\n  targetLang: string;\n  timestamp: Date;\n}\n\nconst Translator: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [sourceText, setSourceText] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [sourceLang, setSourceLang] = useState('zh-CN');\n  const [targetLang, setTargetLang] = useState('en-US');\n  const [translationHistory, setTranslationHistory] = useState<\n    TranslationHistory[]\n  >([]);\n  const [_charCount, setCharCount] = useState(0);\n\n  const languages = [\n    { label: '中文', value: 'zh-CN' },\n    { label: '英语', value: 'en-US' },\n    { label: '日语', value: 'ja-JP' },\n    { label: '韩语', value: 'ko-KR' },\n    { label: '法语', value: 'fr-FR' },\n    { label: '德语', value: 'de-DE' },\n    { label: '西班牙语', value: 'es-ES' },\n    { label: '俄语', value: 'ru-RU' },\n  ];\n\n  useEffect(() => {\n    setCharCount(sourceText.length);\n  }, [sourceText]);\n\n  const handleTranslate = async () => {\n    if (!sourceText.trim()) {\n      message.warning('请输入要翻译的内容');\n      return;\n    }\n    setLoading(true);\n    try {\n      const result = await baiduTranslateService.translate({\n        text: sourceText,\n        from: sourceLang,\n        to: targetLang,\n      });\n      setTranslatedText(result);\n\n      const newHistory: TranslationHistory = {\n        id: Date.now().toString(),\n        sourceText,\n        translatedText: result,\n        sourceLang,\n        targetLang,\n        timestamp: new Date(),\n      };\n      setTranslationHistory([newHistory, ...translationHistory.slice(0, 19)]);\n\n      message.success('翻译完成');\n    } catch (error: any) {\n      message.error(error.message || '翻译失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSwapLanguages = () => {\n    const tempLang = sourceLang;\n    setSourceLang(targetLang);\n    setTargetLang(tempLang);\n    setSourceText(translatedText);\n    setTranslatedText(sourceText);\n  };\n\n  const handleCopy = (text: string) => {\n    navigator.clipboard.writeText(text);\n    message.success('已复制到剪贴板');\n  };\n\n  const handleSpeak = (text: string, lang: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = lang;\n      speechSynthesis.speak(utterance);\n    } else {\n      message.warning('浏览器不支持语音朗读');\n    }\n  };\n\n  const handleClear = () => {\n    setSourceText('');\n    setTranslatedText('');\n  };\n\n  const handleLoadHistory = (history: TranslationHistory) => {\n    setSourceText(history.sourceText);\n    setTranslatedText(history.translatedText);\n    setSourceLang(history.sourceLang);\n    setTargetLang(history.targetLang);\n  };\n\n  const handleDeleteHistory = (id: string) => {\n    setTranslationHistory(translationHistory.filter((h) => h.id !== id));\n    message.success('已删除历史记录');\n  };\n\n  const handleDocumentUpload = async (file: File) => {\n    if (file.size > 5 * 1024 * 1024) {\n      message.error('文件不能超过 5MB');\n      return false;\n    }\n    setLoading(true);\n    try {\n      const text = await file.text();\n      setSourceText(text);\n      message.success('文件加载成功，准备翻译...');\n      setTimeout(() => handleTranslate(), 500);\n    } catch {\n      message.error('文件读取失败');\n    } finally {\n      setLoading(false);\n    }\n    return false;\n  };\n\n  return (\n    <PageContainer\n      header={{\n        title: 'AI 翻译',\n        subTitle: '支持历史记录和文档翻译',\n      }}\n    >\n      <ProCard>\n        <Tabs\n          items={[\n            {\n              key: 'text',\n              label: '文本翻译',\n              children: (\n                <Row gutter={[24, 24]}>\n                  <Col span={24}>\n                    <Space\n                      size=\"large\"\n                      style={{ width: '100%', justifyContent: 'center' }}\n                    >\n                      <Select\n                        value={sourceLang}\n                        onChange={setSourceLang}\n                        style={{ width: 150 }}\n                        options={languages}\n                      />\n                      <Button\n                        icon={<SwapOutlined />}\n                        onClick={handleSwapLanguages}\n                        shape=\"circle\"\n                      />\n                      <Select\n                        value={targetLang}\n                        onChange={setTargetLang}\n                        style={{ width: 150 }}\n                        options={languages}\n                      />\n                    </Space>\n                  </Col>\n\n                  <Col xs={24} lg={12}>\n                    <ProCard title=\"原文\" bordered>\n                      <TextArea\n                        value={sourceText}\n                        onChange={(e) => setSourceText(e.target.value)}\n                        placeholder=\"输入要翻译的内容...\"\n                        rows={12}\n                        maxLength={5000}\n                        showCount\n                      />\n                      <div style={{ marginTop: 16 }}>\n                        <Button\n                          type=\"primary\"\n                          onClick={handleTranslate}\n                          loading={loading}\n                          block\n                          size=\"large\"\n                        >\n                          翻译\n                        </Button>\n                        <Button\n                          onClick={handleClear}\n                          style={{ marginTop: 8 }}\n                          block\n                        >\n                          清空\n                        </Button>\n                        <Button\n                          icon={<SoundOutlined />}\n                          onClick={() => handleSpeak(sourceText, sourceLang)}\n                          disabled={!sourceText}\n                          style={{ marginTop: 8 }}\n                          block\n                        >\n                          朗读\n                        </Button>\n                      </div>\n                    </ProCard>\n                  </Col>\n\n                  <Col xs={24} lg={12}>\n                    <ProCard title=\"译文\" bordered>\n                      <Spin spinning={loading}>\n                        <TextArea\n                          value={translatedText}\n                          placeholder=\"翻译结果将显示在这里...\"\n                          rows={12}\n                          readOnly\n                        />\n                        <div style={{ marginTop: 16 }}>\n                          <Space>\n                            <Button\n                              icon={<CopyOutlined />}\n                              onClick={() => handleCopy(translatedText)}\n                              disabled={!translatedText}\n                            >\n                              复制\n                            </Button>\n                            <Button\n                              icon={<SoundOutlined />}\n                              onClick={() =>\n                                handleSpeak(translatedText, targetLang)\n                              }\n                              disabled={!translatedText}\n                            >\n                              朗读\n                            </Button>\n                          </Space>\n                        </div>\n                      </Spin>\n                    </ProCard>\n                  </Col>\n\n                  <Col span={24}>\n                    <ProCard\n                      title={\n                        <Space>\n                          <HistoryOutlined />\n                          <span>翻译历史</span>\n                          <Tag color=\"blue\">{translationHistory.length}</Tag>\n                        </Space>\n                      }\n                      bordered\n                      collapsible\n                      defaultCollapsed\n                    >\n                      <List\n                        dataSource={translationHistory}\n                        locale={{ emptyText: '暂无历史记录' }}\n                        renderItem={(item) => (\n                          <List.Item\n                            actions={[\n                              <Button\n                                key=\"load\"\n                                type=\"link\"\n                                size=\"small\"\n                                onClick={() => handleLoadHistory(item)}\n                              >\n                                加载\n                              </Button>,\n                              <Button\n                                key=\"delete\"\n                                type=\"link\"\n                                size=\"small\"\n                                danger\n                                icon={<DeleteOutlined />}\n                                onClick={() => handleDeleteHistory(item.id)}\n                              />,\n                            ]}\n                          >\n                            <List.Item.Meta\n                              title={\n                                <Space>\n                                  <Tag color=\"blue\">\n                                    {\n                                      languages.find(\n                                        (l) => l.value === item.sourceLang,\n                                      )?.label\n                                    }\n                                  </Tag>\n                                  <SwapOutlined />\n                                  <Tag color=\"green\">\n                                    {\n                                      languages.find(\n                                        (l) => l.value === item.targetLang,\n                                      )?.label\n                                    }\n                                  </Tag>\n                                </Space>\n                              }\n                              description={\n                                <div>\n                                  <Text type=\"secondary\">\n                                    {item.sourceText.substring(0, 50)}\n                                    {item.sourceText.length > 50 ? '...' : ''}\n                                  </Text>\n                                  <br />\n                                  <Text\n                                    type=\"secondary\"\n                                    style={{ fontSize: 12 }}\n                                  >\n                                    {item.timestamp.toLocaleString('zh-CN')}\n                                  </Text>\n                                </div>\n                              }\n                            />\n                          </List.Item>\n                        )}\n                      />\n                    </ProCard>\n                  </Col>\n                </Row>\n              ),\n            },\n            {\n              key: 'document',\n              label: '文档翻译',\n              children: (\n                <div style={{ padding: '40px', textAlign: 'center' }}>\n                  <Upload.Dragger\n                    beforeUpload={handleDocumentUpload}\n                    maxCount={1}\n                    accept=\".txt,.doc,.docx,.pdf,.md\"\n                  >\n                    <p className=\"ant-upload-drag-icon\">\n                      <FileTextOutlined style={{ fontSize: 48 }} />\n                    </p>\n                    <p className=\"ant-upload-text\">点击或拖拽文件上传</p>\n                    <p className=\"ant-upload-hint\">\n                      支持 TXT、MD、DOC、DOCX、PDF，最大 5MB\n                    </p>\n                  </Upload.Dragger>\n                  {loading && (\n                    <div style={{ marginTop: 24 }}>\n                      <Progress percent={50} status=\"active\" />\n                      <Text type=\"secondary\">正在处理文档...</Text>\n                    </div>\n                  )}\n                </div>\n              ),\n            },\n          ]}\n        />\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default Translator;\n","import axios from 'axios';\r\nimport md5 from 'md5';\r\n\r\ninterface BaiduTranslateConfig {\r\n    appid: string;\r\n    secretKey: string;\r\n    apiUrl?: string;\r\n}\r\n\r\ninterface TranslateParams {\r\n    text: string;\r\n    from: string;\r\n    to: string;\r\n}\r\n\r\ninterface BaiduTranslateResponse {\r\n    trans_result: Array<{\r\n        src: string;\r\n        dst: string;\r\n    }>;\r\n    from: string;\r\n    to: string;\r\n}\r\n\r\nclass BaiduTranslateService {\r\n    private config: BaiduTranslateConfig;\r\n    private apiUrl: string;\r\n\r\n    constructor(config: BaiduTranslateConfig) {\r\n        this.config = config;\r\n        this.apiUrl = config.apiUrl || 'https://fanyi-api.baidu.com/api/trans/vip/translate';\r\n    }\r\n\r\n    /**\r\n     * 生成签名\r\n     * sign = MD5(appid+query+salt+密钥)\r\n     */\r\n    private generateSign(query: string, salt: string): string {\r\n        const { appid, secretKey } = this.config;\r\n        const str = `${appid}${query}${salt}${secretKey}`;\r\n        return md5(str);\r\n    }\r\n\r\n    /**\r\n     * 翻译文本\r\n     */\r\n    async translate(params: TranslateParams): Promise<string> {\r\n        const { text, from, to } = params;\r\n        const salt = Date.now().toString();\r\n        const sign = this.generateSign(text, salt);\r\n\r\n        try {\r\n            const response = await axios.get<BaiduTranslateResponse>(this.apiUrl, {\r\n                params: {\r\n                    q: text,\r\n                    from: this.convertLangCode(from),\r\n                    to: this.convertLangCode(to),\r\n                    appid: this.config.appid,\r\n                    salt,\r\n                    sign,\r\n                },\r\n                timeout: 10000,\r\n            });\r\n\r\n            if (response.data.trans_result && response.data.trans_result.length > 0) {\r\n                return response.data.trans_result.map(item => item.dst).join('\\n');\r\n            }\r\n\r\n            throw new Error('翻译失败：未返回结果');\r\n        } catch (error: any) {\r\n            console.error('百度翻译 API 错误:', error);\r\n\r\n            // 处理常见错误\r\n            if (error.response?.data) {\r\n                const errorCode = error.response.data.error_code;\r\n                const errorMsg = this.getErrorMessage(errorCode);\r\n                throw new Error(errorMsg);\r\n            }\r\n\r\n            throw new Error('翻译服务暂时不可用，请稍后重试');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批量翻译\r\n     */\r\n    async batchTranslate(texts: string[], from: string, to: string): Promise<string[]> {\r\n        const results: string[] = [];\r\n\r\n        // 避免并发过多，分批处理\r\n        const batchSize = 5;\r\n        for (let i = 0; i < texts.length; i += batchSize) {\r\n            const batch = texts.slice(i, i + batchSize);\r\n            const promises = batch.map(text =>\r\n                this.translate({ text, from, to })\r\n                    .catch(error => {\r\n                        console.error(`翻译失败: ${text}`, error);\r\n                        return text; // 失败时返回原文\r\n                    })\r\n            );\r\n            const batchResults = await Promise.all(promises);\r\n            results.push(...batchResults);\r\n\r\n            // 添加延迟，避免超过 API 频率限制\r\n            if (i + batchSize < texts.length) {\r\n                await this.delay(1000);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * 转换语言代码\r\n     * 将前端使用的语言代码转换为百度 API 的代码\r\n     */\r\n    private convertLangCode(langCode: string): string {\r\n        const langMap: Record<string, string> = {\r\n            'zh-CN': 'zh',\r\n            'en-US': 'en',\r\n            'ja-JP': 'jp',\r\n            'ko-KR': 'kor',\r\n            'fr-FR': 'fra',\r\n            'de-DE': 'de',\r\n            'es-ES': 'spa',\r\n            'ru-RU': 'ru',\r\n        };\r\n        return langMap[langCode] || langCode;\r\n    }\r\n\r\n    /**\r\n     * 获取错误信息\r\n     */\r\n    private getErrorMessage(errorCode: string): string {\r\n        const errorMap: Record<string, string> = {\r\n            '52000': '成功',\r\n            '52001': '请求超时，请重试',\r\n            '52002': '系统错误，请重试',\r\n            '52003': '未授权用户，请检查 appid 和密钥',\r\n            '54000': '必填参数为空',\r\n            '54001': '签名错误',\r\n            '54003': '访问频率受限',\r\n            '54004': '账户余额不足',\r\n            '54005': '长query请求频繁',\r\n            '58000': '客户端IP非法',\r\n            '58001': '译文语言方向不支持',\r\n        };\r\n        return errorMap[errorCode] || `翻译错误 (${errorCode})`;\r\n    }\r\n\r\n    private delay(ms: number): Promise<void> {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\n// 导出单例\r\nexport const baiduTranslateService = new BaiduTranslateService({\r\n    appid: process.env.BAIDU_TRANSLATE_APPID || '',\r\n    secretKey: process.env.BAIDU_TRANSLATE_SECRET || '',\r\n});\r\n\r\nexport default BaiduTranslateService;"],"names":[],"mappings":"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"}