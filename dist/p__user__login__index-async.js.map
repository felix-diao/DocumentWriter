{"version":3,"sources":["src/pages/user/login/index.tsx","src/services/ant-design-pro/login.ts"],"sourcesContent":["import {\r\n  AlipayCircleOutlined,\r\n  LockOutlined,\r\n  MobileOutlined,\r\n  TaobaoCircleOutlined,\r\n  UserOutlined,\r\n  WeiboCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport {\r\n  LoginForm,\r\n  ProFormCaptcha,\r\n  ProFormCheckbox,\r\n  ProFormText,\r\n} from '@ant-design/pro-components';\r\nimport {\r\n  FormattedMessage,\r\n  Helmet,\r\n  SelectLang,\r\n  useIntl,\r\n  useModel,\r\n} from '@umijs/max';\r\nimport { Alert, App, Tabs } from 'antd';\r\nimport { createStyles } from 'antd-style';\r\nimport React, { useState } from 'react';\r\nimport { flushSync } from 'react-dom';\r\nimport { Footer } from '@/components';\r\nimport { login } from '@/services/ant-design-pro/api';\r\nimport { getFakeCaptcha } from '@/services/ant-design-pro/login';\r\nimport Settings from '../../../../config/defaultSettings';\r\n\r\nconst useStyles = createStyles(({ token }) => {\r\n  return {\r\n    action: {\r\n      marginLeft: '8px',\r\n      color: 'rgba(0, 0, 0, 0.2)',\r\n      fontSize: '24px',\r\n      verticalAlign: 'middle',\r\n      cursor: 'pointer',\r\n      transition: 'color 0.3s',\r\n      '&:hover': {\r\n        color: token.colorPrimaryActive,\r\n      },\r\n    },\r\n    lang: {\r\n      width: 42,\r\n      height: 42,\r\n      lineHeight: '42px',\r\n      position: 'fixed',\r\n      right: 16,\r\n      borderRadius: token.borderRadius,\r\n      ':hover': {\r\n        backgroundColor: token.colorBgTextHover,\r\n      },\r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n      backgroundImage:\r\n        \"url('https://mdn.alipayobjects.com/yuyan_qk0oxh/afts/img/V-_oS6r-i7wAAAAAAAAAAAAAFl94AQBr')\",\r\n      backgroundSize: '100% 100%',\r\n    },\r\n  };\r\n});\r\n\r\nconst ActionIcons = () => {\r\n  const { styles } = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AlipayCircleOutlined\r\n        key=\"AlipayCircleOutlined\"\r\n        className={styles.action}\r\n      />\r\n      <TaobaoCircleOutlined\r\n        key=\"TaobaoCircleOutlined\"\r\n        className={styles.action}\r\n      />\r\n      <WeiboCircleOutlined\r\n        key=\"WeiboCircleOutlined\"\r\n        className={styles.action}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Lang = () => {\r\n  const { styles } = useStyles();\r\n\r\n  return (\r\n    <div className={styles.lang} data-lang>\r\n      {SelectLang && <SelectLang />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoginMessage: React.FC<{\r\n  content: string;\r\n}> = ({ content }) => {\r\n  return (\r\n    <Alert\r\n      style={{\r\n        marginBottom: 24,\r\n      }}\r\n      message={content}\r\n      type=\"error\"\r\n      showIcon\r\n    />\r\n  );\r\n};\r\n\r\nconst Login: React.FC = () => {\r\n  const [userLoginState, setUserLoginState] = useState<API.LoginResult>({});\r\n  const [type, setType] = useState<string>('account');\r\n  const { initialState, setInitialState } = useModel('@@initialState');\r\n  const { styles } = useStyles();\r\n  const { message } = App.useApp();\r\n  const intl = useIntl();\r\n\r\n  const fetchUserInfo = async () => {\r\n    const userInfo = await initialState?.fetchUserInfo?.();\r\n    if (userInfo) {\r\n      flushSync(() => {\r\n        setInitialState((s) => ({\r\n          ...s,\r\n          currentUser: userInfo,\r\n        }));\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values: API.LoginParams) => {\r\n    try {\r\n      // 登录\r\n      const msg = await login({ ...values, type });\r\n      if (msg.status === 'ok') {\r\n        const defaultLoginSuccessMessage = intl.formatMessage({\r\n          id: 'pages.login.success',\r\n          defaultMessage: '登录成功！',\r\n        });\r\n        message.success(defaultLoginSuccessMessage);\r\n        await fetchUserInfo();\r\n        const urlParams = new URL(window.location.href).searchParams;\r\n        window.location.href = urlParams.get('redirect') || '/';\r\n        return;\r\n      }\r\n      console.log(msg);\r\n      // 如果失败去设置用户错误信息\r\n      setUserLoginState(msg);\r\n    } catch (error) {\r\n      const defaultLoginFailureMessage = intl.formatMessage({\r\n        id: 'pages.login.failure',\r\n        defaultMessage: '登录失败，请重试！',\r\n      });\r\n      console.log(error);\r\n      message.error(defaultLoginFailureMessage);\r\n    }\r\n  };\r\n  const { status, type: loginType } = userLoginState;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Helmet>\r\n        <title>\r\n          {intl.formatMessage({\r\n            id: 'menu.login',\r\n            defaultMessage: '登录页',\r\n          })}\r\n          {Settings.title && ` - ${Settings.title}`}\r\n        </title>\r\n      </Helmet>\r\n      <Lang />\r\n      <div\r\n        style={{\r\n          flex: '1',\r\n          padding: '32px 0',\r\n        }}\r\n      >\r\n        <LoginForm\r\n          contentStyle={{\r\n            minWidth: 280,\r\n            maxWidth: '75vw',\r\n          }}\r\n          logo={<img alt=\"logo\" src=\"/logo.svg\" />}\r\n          title={Settings.title}\r\n          subTitle={intl.formatMessage({\r\n            id: 'pages.layouts.userLayout.title',\r\n          })}\r\n          initialValues={{\r\n            autoLogin: true,\r\n          }}\r\n          actions={[\r\n            <FormattedMessage\r\n              key=\"loginWith\"\r\n              id=\"pages.login.loginWith\"\r\n              defaultMessage=\"其他登录方式\"\r\n            />,\r\n            <ActionIcons key=\"icons\" />,\r\n          ]}\r\n          onFinish={async (values) => {\r\n            await handleSubmit(values as API.LoginParams);\r\n          }}\r\n        >\r\n          <Tabs\r\n            activeKey={type}\r\n            onChange={setType}\r\n            centered\r\n            items={[\r\n              {\r\n                key: 'account',\r\n                label: intl.formatMessage({\r\n                  id: 'pages.login.accountLogin.tab',\r\n                  defaultMessage: '账户密码登录',\r\n                }),\r\n              },\r\n              {\r\n                key: 'mobile',\r\n                label: intl.formatMessage({\r\n                  id: 'pages.login.phoneLogin.tab',\r\n                  defaultMessage: '手机号登录',\r\n                }),\r\n              },\r\n            ]}\r\n          />\r\n\r\n          {status === 'error' && loginType === 'account' && (\r\n            <LoginMessage\r\n              content={intl.formatMessage({\r\n                id: 'pages.login.accountLogin.errorMessage',\r\n                defaultMessage: '账户或密码错误(admin/ant.design)',\r\n              })}\r\n            />\r\n          )}\r\n          {type === 'account' && (\r\n            <>\r\n              <ProFormText\r\n                name=\"username\"\r\n                fieldProps={{\r\n                  size: 'large',\r\n                  prefix: <UserOutlined />,\r\n                }}\r\n                placeholder={intl.formatMessage({\r\n                  id: 'pages.login.username.placeholder',\r\n                  defaultMessage: '用户名: admin or user',\r\n                })}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: (\r\n                      <FormattedMessage\r\n                        id=\"pages.login.username.required\"\r\n                        defaultMessage=\"请输入用户名!\"\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n              <ProFormText.Password\r\n                name=\"password\"\r\n                fieldProps={{\r\n                  size: 'large',\r\n                  prefix: <LockOutlined />,\r\n                }}\r\n                placeholder={intl.formatMessage({\r\n                  id: 'pages.login.password.placeholder',\r\n                  defaultMessage: '密码: ant.design',\r\n                })}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: (\r\n                      <FormattedMessage\r\n                        id=\"pages.login.password.required\"\r\n                        defaultMessage=\"请输入密码！\"\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {status === 'error' && loginType === 'mobile' && (\r\n            <LoginMessage content=\"验证码错误\" />\r\n          )}\r\n          {type === 'mobile' && (\r\n            <>\r\n              <ProFormText\r\n                fieldProps={{\r\n                  size: 'large',\r\n                  prefix: <MobileOutlined />,\r\n                }}\r\n                name=\"mobile\"\r\n                placeholder={intl.formatMessage({\r\n                  id: 'pages.login.phoneNumber.placeholder',\r\n                  defaultMessage: '手机号',\r\n                })}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: (\r\n                      <FormattedMessage\r\n                        id=\"pages.login.phoneNumber.required\"\r\n                        defaultMessage=\"请输入手机号！\"\r\n                      />\r\n                    ),\r\n                  },\r\n                  {\r\n                    pattern: /^1\\d{10}$/,\r\n                    message: (\r\n                      <FormattedMessage\r\n                        id=\"pages.login.phoneNumber.invalid\"\r\n                        defaultMessage=\"手机号格式错误！\"\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n              <ProFormCaptcha\r\n                fieldProps={{\r\n                  size: 'large',\r\n                  prefix: <LockOutlined />,\r\n                }}\r\n                captchaProps={{\r\n                  size: 'large',\r\n                }}\r\n                placeholder={intl.formatMessage({\r\n                  id: 'pages.login.captcha.placeholder',\r\n                  defaultMessage: '请输入验证码',\r\n                })}\r\n                captchaTextRender={(timing, count) => {\r\n                  if (timing) {\r\n                    return `${count} ${intl.formatMessage({\r\n                      id: 'pages.getCaptchaSecondText',\r\n                      defaultMessage: '获取验证码',\r\n                    })}`;\r\n                  }\r\n                  return intl.formatMessage({\r\n                    id: 'pages.login.phoneLogin.getVerificationCode',\r\n                    defaultMessage: '获取验证码',\r\n                  });\r\n                }}\r\n                name=\"captcha\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: (\r\n                      <FormattedMessage\r\n                        id=\"pages.login.captcha.required\"\r\n                        defaultMessage=\"请输入验证码！\"\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n                onGetCaptcha={async (phone) => {\r\n                  const result = await getFakeCaptcha({\r\n                    phone,\r\n                  });\r\n                  if (!result) {\r\n                    return;\r\n                  }\r\n                  message.success('获取验证码成功！验证码为：1234');\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n          <div\r\n            style={{\r\n              marginBottom: 24,\r\n            }}\r\n          >\r\n            <ProFormCheckbox noStyle name=\"autoLogin\">\r\n              <FormattedMessage\r\n                id=\"pages.login.rememberMe\"\r\n                defaultMessage=\"自动登录\"\r\n              />\r\n            </ProFormCheckbox>\r\n            <a\r\n              style={{\r\n                float: 'right',\r\n              }}\r\n            >\r\n              <FormattedMessage\r\n                id=\"pages.login.forgotPassword\"\r\n                defaultMessage=\"忘记密码\"\r\n              />\r\n            </a>\r\n          </div>\r\n        </LoginForm>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// @ts-ignore\r\n/* eslint-disable */\r\nimport { request } from '@umijs/max';\r\n\r\n/** 发送验证码 POST /api/login/captcha */\r\nexport async function getFakeCaptcha(\r\n  params: {\r\n    // query\r\n    /** 手机号 */\r\n    phone?: string;\r\n  },\r\n  options?: { [key: string]: any },\r\n) {\r\n  return request<API.FakeCaptcha>('/api/login/captcha', {\r\n    method: 'GET',\r\n    params: {\r\n      ...params,\r\n    },\r\n    ...(options || {}),\r\n  });\r\n}\r\n"],"names":[],"mappings":"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"}