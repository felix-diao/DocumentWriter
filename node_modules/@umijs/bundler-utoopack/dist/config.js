var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/config.ts
var config_exports = {};
__export(config_exports, {
  getDevUtooPackConfig: () => getDevUtooPackConfig,
  getProdUtooPackConfig: () => getProdUtooPackConfig
});
module.exports = __toCommonJS(config_exports);
var import_bundler_webpack = require("@umijs/bundler-webpack");
var import_utils = require("@umijs/utils");
var import_pack = require("@utoo/pack");
function convertProcessEnvForUtoopack(webpackConfig) {
  var _a;
  let processEnvForUtoopack = {};
  if (webpackConfig.plugins) {
    const definePlugin = webpackConfig.plugins.find(
      (plugin) => plugin.constructor.name === "DefinePlugin"
    );
    if ((_a = definePlugin == null ? void 0 : definePlugin.definitions) == null ? void 0 : _a["process.env"]) {
      for (const [key, value] of Object.entries(
        definePlugin.definitions["process.env"]
      )) {
        if (typeof value === "string" && value.startsWith('"') && value.endsWith('"')) {
          processEnvForUtoopack[key] = JSON.parse(value);
        } else {
          processEnvForUtoopack[key] = value;
        }
      }
    }
  }
  return processEnvForUtoopack;
}
function getModularizeImports(extraBabelPlugins) {
  return extraBabelPlugins.filter((p) => /^import$|babel-plugin-import/.test(p[0])).reduce(
    (acc, [_, v]) => {
      const { libraryName, libraryDirectory, style, ...rest } = v;
      if (Object.keys(rest).length > 0) {
        throw new Error(
          `babel-plugin-import options ${Object.keys(
            rest
          )} is not supported in utoopack bundler`
        );
      }
      if (typeof style === "function") {
        throw new Error(
          `babel-plugin-import style function is not supported in utoopack bundler`
        );
      }
      acc[libraryName] = {
        transform: `${libraryName}/${libraryDirectory}/{{ kebabCase member }}`,
        preventFullImport: false,
        skipDefaultConversion: false,
        style: typeof style === "boolean" ? "style" : style
      };
      return acc;
    },
    {}
  );
}
function getNormalizedAlias(alias, rootDir) {
  const newAlias = { ...alias };
  if (newAlias.react) {
    newAlias["react/*"] = `${newAlias.react}/*`;
  }
  newAlias[`${rootDir}/*`] = `${rootDir}/*`;
  return newAlias;
}
async function getProdUtooPackConfig(opts) {
  var _a;
  const webpackConfig = await (0, import_bundler_webpack.getConfig)({
    cwd: opts.cwd,
    rootDir: opts.rootDir,
    env: "production",
    entry: opts.entry,
    userConfig: opts.config,
    analyze: process.env.ANALYZE,
    babelPreset: opts.babelPreset,
    extraBabelPlugins: [
      ...opts.beforeBabelPlugins || [],
      ...opts.extraBabelPlugins || []
    ],
    extraBabelPresets: [
      ...opts.beforeBabelPresets || [],
      ...opts.extraBabelPresets || []
    ],
    extraBabelIncludes: opts.config.extraBabelIncludes,
    chainWebpack: opts.chainWebpack,
    modifyWebpackConfig: opts.modifyWebpackConfig,
    pkg: opts.pkg,
    disableCopy: opts.disableCopy
  });
  let utooBundlerOpts = (0, import_pack.compatOptionsFromWebpack)({
    ...import_utils.lodash.omit(webpackConfig, ["target", "module"]),
    compatMode: true
  });
  const extraBabelPlugins = [
    ...opts.extraBabelPlugins || [],
    ...opts.config.extraBabelPlugins || []
  ];
  const modularizeImports = getModularizeImports(extraBabelPlugins);
  const processEnvForUtoopack = convertProcessEnvForUtoopack(webpackConfig);
  utooBundlerOpts = {
    ...utooBundlerOpts,
    config: {
      ...utooBundlerOpts.config,
      output: {
        ...utooBundlerOpts.config.output,
        clean: opts.clean
      },
      optimization: {
        ...utooBundlerOpts.config.optimization,
        modularizeImports,
        concatenateModules: true
        // minify: false,
        // moduleIds: 'named',
      },
      resolve: {
        ...utooBundlerOpts.config.resolve,
        alias: getNormalizedAlias(
          (_a = utooBundlerOpts.config.resolve) == null ? void 0 : _a.alias,
          opts.rootDir
        )
      },
      styles: {
        less: {
          modifyVars: opts.config.theme,
          javascriptEnabled: true,
          ...opts.config.lessLoader
        },
        sass: opts.config.sassLoader ?? void 0
      },
      // Override process.env for utoopack format
      define: {
        ...utooBundlerOpts.config.define,
        "process.env": JSON.stringify(processEnvForUtoopack)
      }
    }
  };
  return utooBundlerOpts;
}
async function getDevUtooPackConfig(opts) {
  var _a;
  let webpackConfig = await (0, import_bundler_webpack.getConfig)({
    cwd: opts.cwd,
    rootDir: opts.rootDir,
    env: "development",
    entry: opts.entry,
    userConfig: opts.config,
    babelPreset: opts.babelPreset,
    extraBabelPlugins: [
      ...opts.beforeBabelPlugins || [],
      ...opts.extraBabelPlugins || []
    ],
    extraBabelPresets: [
      ...opts.beforeBabelPresets || [],
      ...opts.extraBabelPresets || []
    ],
    extraBabelIncludes: opts.config.extraBabelIncludes,
    chainWebpack: opts.chainWebpack,
    modifyWebpackConfig: opts.modifyWebpackConfig,
    // TO avoild bundler webpack add extra entry.
    hmr: false,
    analyze: process.env.ANALYZE
  });
  let utooBundlerOpts = (0, import_pack.compatOptionsFromWebpack)({
    ...import_utils.lodash.omit(webpackConfig, ["target", "module"]),
    compatMode: true
  });
  const extraBabelPlugins = [
    ...opts.extraBabelPlugins || [],
    ...opts.config.extraBabelPlugins || []
  ];
  const modularizeImports = getModularizeImports(extraBabelPlugins);
  const processEnvForUtoopack = convertProcessEnvForUtoopack(webpackConfig);
  utooBundlerOpts = {
    ...utooBundlerOpts,
    config: {
      ...utooBundlerOpts.config,
      output: {
        ...utooBundlerOpts.config.output,
        // utoopack 的 dev 需要默认清空产物目录
        clean: opts.clean === void 0 ? true : opts.clean
      },
      resolve: {
        ...utooBundlerOpts.config.resolve,
        alias: getNormalizedAlias(
          (_a = utooBundlerOpts.config.resolve) == null ? void 0 : _a.alias,
          opts.rootDir
        )
      },
      optimization: {
        ...utooBundlerOpts.config.optimization,
        modularizeImports
      },
      styles: {
        less: {
          modifyVars: opts.config.theme,
          javascriptEnabled: true,
          ...opts.config.lessLoader
        },
        sass: opts.config.sassLoader ?? void 0
      },
      // Override process.env for utoopack format
      define: {
        ...utooBundlerOpts.config.define,
        "process.env": JSON.stringify(processEnvForUtoopack)
      }
    },
    watch: {
      enable: true
    },
    dev: true
  };
  return utooBundlerOpts;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDevUtooPackConfig,
  getProdUtooPackConfig
});
