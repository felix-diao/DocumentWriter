import type { IOpts as IConfigOpts } from '@umijs/bundler-webpack';
import type { BundleOptions } from '@utoo/pack';
import type { IOpts } from './types';
export declare function getProdUtooPackConfig(opts: IOpts): Promise<BundleOptions>;
export declare type IDevOpts = {
    afterMiddlewares?: any[];
    beforeMiddlewares?: any[];
    onDevCompileDone?: Function;
    onProgress?: Function;
    onMFSUProgress?: Function;
    port?: number;
    host?: string;
    ip?: string;
    babelPreset?: any;
    chainWebpack?: Function;
    modifyWebpackConfig?: Function;
    beforeBabelPlugins?: any[];
    beforeBabelPresets?: any[];
    extraBabelPlugins?: any[];
    extraBabelPresets?: any[];
    cwd: string;
    rootDir: string;
    config: Record<string, any>;
    entry: Record<string, string>;
    mfsuStrategy?: 'eager' | 'normal';
    mfsuInclude?: string[];
    srcCodeCache?: any;
    startBuildWorker?: (deps: any[]) => Worker;
    onBeforeMiddleware?: Function;
    disableCopy?: boolean;
    clean?: boolean;
} & Pick<IConfigOpts, 'cache' | 'pkg'>;
export declare function getDevUtooPackConfig(opts: IDevOpts): Promise<BundleOptions>;
